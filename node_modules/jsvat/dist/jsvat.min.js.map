{"version":3,"sources":["jsvat.js"],"names":["jsvat","Result","vat","isValid","country","this","value","name","isoCode","short","codes","long","numeric","removeExtraChars","toString","toUpperCase","replace","isValEqToCode","val","isInList","list","i","length","isBlocked","blocked","allowed","isAllowed","getCountry","countries","k","hasOwnProperty","isVatValidToRegexp","rules","regex","regexArr","test","isVatMathValid","calcFn","isVatValid","regexpValidRes","exec","exports","checkVAT","Error","cleanVAT","result","austria","temp","total","charAt","multipliers","Math","floor","slice","belgium","bulgaria","_increase","from","to","incr","_increase2","expect","_checkNineLengthVat","month","physical","substr","_isPhysicalPerson","foreigner","_isForeigner","miscellaneous","_miscellaneousVAT","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","additional","_isLegalEntities","j","lookup","_isIndividualType2","_isIndividualType3","_isIndividualType1","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","extractDigit12","med","_doubleCheckCalculation12","l","alt","_check9DigitVat","_check12DigitVat","check","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","m_1","_check10DigitINN","total1","total2","m_2","m_3","expect2","_check12DigitINN","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict'\n\n  function Result(vat, isValid, country) {\n    this.value = vat || null\n    this.isValid = !!isValid\n\n    if (country) {\n      this.country = {\n        name: country.name,\n        isoCode: {\n          short: country.codes[0],\n          long: country.codes[1],\n          numeric: country.codes[2]\n        }\n      }\n    }\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function isValEqToCode(val, codes) {\n    return (val === codes[0] || val === codes[1] || val === codes[2])\n  }\n\n  function isInList(list, country) {\n    if (!list) return false\n\n    for (var i = 0; i < list.length; i++) {\n      var val = list[i].toUpperCase()\n      if (val === country.name.toUpperCase()) return true\n      if (isValEqToCode(val, country.codes)) return true\n    }\n\n    return false\n  }\n\n  function isBlocked(country, blocked, allowed) {\n    var isBlocked = isInList(blocked, country)\n    if (isBlocked) return true\n    var isAllowed = isInList(allowed, country)\n    return allowed.length > 0 && !isAllowed\n  }\n\n  function getCountry(vat, countries) {\n    for (var k in countries) {\n      if (countries.hasOwnProperty(k)) {\n        var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex)\n        if (regexpValidRes.isValid) return countries[k]\n      }\n    }\n\n    return null\n  }\n\n  function isVatValidToRegexp(vat, regexArr) {\n    for (var i = 0; i < regexArr.length; i++) {\n      var regex = regexArr[i]\n      var isValid = regex.test(vat)\n      if (isValid) return {\n        isValid: true,\n        regex: regex\n      }\n    }\n\n    return {\n      isValid: false\n    }\n  }\n\n  function isVatMathValid(vat, country) {\n    return country.calcFn(vat)\n  }\n\n  function isVatValid(vat, country) {\n    var regexpValidRes = isVatValidToRegexp(vat, country.rules.regex)\n    if (!regexpValidRes.isValid) return false\n    return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country)\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  var exports = {\n    blocked: [],\n    allowed: [],\n    countries: {},\n    checkVAT: function(vat) {\n      if (!vat) throw new Error('VAT should be specified')\n      var cleanVAT = removeExtraChars(vat)\n      var result = new Result(cleanVAT)\n\n      var country = getCountry(cleanVAT, this.countries)\n      if (!country) return result\n      if (isBlocked(country, this.blocked, this.allowed)) return new Result(cleanVAT, false, country)\n\n      var isValid = isVatValid(cleanVAT, country)\n      if (isValid) return new Result(cleanVAT, isValid, country)\n\n      return result\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function(vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr)\n        }\n        return value\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i]\n        }\n        return value\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total\n        var temp = 0\n        var expect = +vat.slice(8)\n\n        temp = _increase(temp, vat, 0, 8, 1)\n\n        total = temp % 11\n        if (total !== 10) {\n          return total === expect\n        }\n\n        temp = _increase(0, vat, 0, 8, 3)\n\n        total = temp % 11\n        if (total === 10) total = 0\n\n        return total === expect\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4)\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n            // Establish check digit.\n            total = total % 11\n            if (total === 10) total = 0\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true\n          }\n        }\n\n        return false\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) return false\n        if (total === 11) total = 0\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1)\n        return total === expect\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat)\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function(vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType1(vat, rules) {\n        if (rules.additional[1].test(vat)) {\n          var temp = +vat.slice(0, 2)\n\n          if (temp > 62) {\n            return false\n          } else {\n            return true\n          }\n        }\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Convert calculated check digit according to a lookup table\n          var expect = +vat.slice(8, 9)\n          return rules.lookup[total - 1] === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n          var expect = +vat % 11 === 0\n          return !!(temp % 11 === 0 && expect)\n        }\n\n        return false\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true\n      if (_isIndividualType2(vat, this.rules)) return true\n      if (_isIndividualType3(vat, this.rules)) return true\n      if (_isIndividualType1(vat, this.rules)) return true\n\n      return false\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'], // TODO (S.Panfilov) that's not a real codes\n    calcFn: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function(vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key]\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i)\n          }\n        }\n\n        return total\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1)\n        }\n        return total\n      }\n\n      function checkDigit(total) {\n        total = total % 11\n        if (total === 10) {\n          total = 0\n        }\n\n        return total\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9)\n          return total === expect\n        }\n        return false\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k)\n        }\n        return total\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l)\n          }\n        }\n\n        return total\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12)\n          return total === expect\n        }\n\n        return false\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function(vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i]\n          }\n\n          total = total % 11\n          if (total > 9) {\n            total = total % 10\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0\n        var total2 = 0\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n          }\n\n          total1 = total1 % 11\n\n          if (total1 > 9) {\n            total1 = total1 % 10\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n          }\n\n          total2 = total2 % 11\n          if (total2 > 9) {\n            total2 = total2 % 10\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11))\n          var expect2 = (total2 === +vat.slice(11, 12))\n          return (expect) && (expect2)\n        }\n\n        return false\n      }\n\n      // See http://russianpartner.biz/test_inn.html for algorithm\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      } else if (this.rules.additional[1].test(vat)) { // Juridical entities other than national ones\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      } else if (this.rules.additional[2].test(vat)) { // Personal number (NIF) (starting with numeric of Y or Z)\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      } else if (this.rules.additional[3].test(vat)) { // Personal number (NIF) (starting with K, L, M, or X)\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports\n\n  return exports\n\n})()"]}